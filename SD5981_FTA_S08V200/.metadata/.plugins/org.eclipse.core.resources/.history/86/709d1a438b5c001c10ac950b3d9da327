////for test method API interfaces
//#include "mapi.hpp"
//using namespace std;
//using namespace V93kLimits;

#include <HILINK_PUG/HiLink16_PUG.h>
/**
 * Test method class.
 *
 * For each testsuite using this test method, one object of this
 * class is created.
 */

class HILINK_RESET: public TestClass {
public:
	STRING 				mHiLink16_MacroList;
	STRING 				mPinList;
	STRING 				sDisconnect;
	STRING				sVDD_Mode;
	STRING				sMultiSS_EN;
	STRING 				sMacroID_Master;
	STRING 				sMacroID_Slaver;
	STRING				sPowerUpCtrlVectorName;
	STRING 				sInitVectorName;
	STRING 				sLoadFW_EN;
	INT					iPrintLvl;


	/**
	 *Initialize the parameter interface to the testflow.
	 *This method is called just once after a testsuite is created.
	 */
	void init()
	{
		add_param("DISCONNECT","string",&sDisconnect)
					 //.set_options("YES:NO")
					 .set_default("NO");
//		add_param("VDD_Mode","string",&sVDD_Mode)
					 //.set_options("VDDN:VDDL:VDDH")
//					 .set_default("VDDN");
		add_param("H16LR_MacroList","string",&mHiLink16_MacroList)
					 .set_comment("HiLink16 Macro List for test")
					 //.set_options("0,1:FromPinList")
					 .set_default("0,1");
//		add_param("PinList","PinString",&mPinList);
		add_param("MultiSS_EN","string",&sMultiSS_EN)
					 .set_comment("Enable or Disable Multi SS Application")
					 //.set_options("YES:NO")
					 .set_default("NO");
//		add_param("MacroID_Master","string",&sMacroID_Master)
// 	 	 	 	 	 .set_default("0");
//		add_param("MacroID_Slaver","string",&sMacroID_Slaver)
// 	 	 	 	 	 .set_default("0");
//		add_param("PowerUpCtrlVectorName","string",&sPowerUpCtrlVectorName)
//					 //.set_options(DEFAULT_HILINK_POWERUPCTRL_VECTOR)
//					 .set_default(DEFAULT_HILINK_POWERUPCTRL_VECTOR);
		add_param("InitVectorName","string",&sInitVectorName)
					 //.set_options(DEFAULT_HILINK_INIT_VECTOR)
					 .set_default(DEFAULT_HILINK_INIT_VECTOR);
		add_param("LoadFW_EN","string",&sLoadFW_EN)
							 //.set_options("YES:NO")
							 .set_default("YES");
		add_param("PrintLvl[0~15]","int",&iPrintLvl)
					 .set_comment("Enable this flag when FlowVariable DebugLevel = 10000(16)"
							     "0000 = RELEASE; 0001 = GENERAL; 0010 = DETAIL; 0100 = EYE_PLOT; 1000 = REG_ACCESS; Can be Assembled")
					 //.set_options("0:1:3:4:7:9")
					 .set_default("3");
	}
	void execute()
		{
		//=============================================
		// Common definition of TM for offline flag,
		// d2s mode, debug mode, test suite name, etc.
		//=============================================
		static	STRING          	sTestsuiteName;
		static	INT					iOffline;
		static  MACRO_LANE_SEL 		MacroLane_Sel;


			//=============================================
			// Variables and MacroLane initialization
			//=============================================
			iOffline = 0;
			sTestsuiteName = TheSoft.Flow().Test().GetCurrentTestName();
			hout.setLevel(iPrintLvl);
			hout.printsuitename(sTestsuiteName);
			Select_Macro_Lane(MacroLane_Sel,mHiLink16_MacroList,mPinList);

			d2s_JTAG& jtag = d2s_JTAG::Instance();

//			if (sDisconnect == "YES") {
//				hout(GENERAL) << "******* DISCONNECT AND CONNECT RESPECT TO HILINK15BP POWER UP SEQUENCE *******" << endl;
//
////				DISCONNECT();
//
//				if (jtag.Context == "DEFAULT") {
//					if (sVDD_Mode == "VDDN") {
//						LEVEL_SPEC spec1(200, 4);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDL") {
//						LEVEL_SPEC spec1(200, 5);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDH") {
//						LEVEL_SPEC spec1(200, 6);
//						Primary.level(spec1);
//					} else {
//						hout(RELEASE) << "Invalid VDD mode!!!!" << endl;
//					}
//				} else {
//					if (sVDD_Mode == "VDDN") {
//						LEVEL_SPEC spec1(201, 4);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDL") {
//						LEVEL_SPEC spec1(201, 5);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDH") {
//						LEVEL_SPEC spec1(201, 6);
//						Primary.level(spec1);
//					} else {
//						hout(RELEASE) << "Invalid VDD mode!!!!" << endl;
//					}
//				}
//
//				CONNECT();
//
//				TheInst.Wait(0.000001*5);
//
//				if (sPowerUpCtrlVectorName != "") {
//					/*********PowerUp Seq Begin**********/
//					HiLinkPowerUpCtrl(sPowerUpCtrlVectorName);
//					WAIT_TIME(5 us);
//				}
//
//
//				if (jtag.Context == "DEFAULT") {
//					if (sVDD_Mode == "VDDN") {
//						LEVEL_SPEC spec1(200, 1);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDL") {
//						LEVEL_SPEC spec1(200, 2);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDH") {
//						LEVEL_SPEC spec1(200, 3);
//						Primary.level(spec1);
//					} else {
//						hout(RELEASE) << "Invalid VDD mode!!!!" << endl;
//					}
//				} else {
//					if (sVDD_Mode == "VDDN") {
//						LEVEL_SPEC spec1(201, 1);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDL") {
//						LEVEL_SPEC spec1(201, 2);
//						Primary.level(spec1);
//					} else if (sVDD_Mode == "VDDH") {
//						LEVEL_SPEC spec1(201, 3);
//						Primary.level(spec1);
//					} else {
//						hout(RELEASE) << "Invalid VDD mode!!!!" << endl;
//					}
//				}
//
//			}

			HiLinkResetAndInit(sInitVectorName);

			if (Global_D2S_Mode == LearningMode) {
				hout(REG_ACCESS) << "***************  Just After Initial Hilink ***************" << endl;
				FWreadDefaultRegisters2CSR(MacroLane_Sel);
			}


			d2s::d2s_LABEL_BEGIN("H16LRTV100_MPB_HiLink_Reset",Global_D2S_Mode);

				if (sMultiSS_EN == "YES") {
					MACRO_LANE_SEL 			MacroLane_Sel_Master;
					MACRO_LANE_SEL 			MacroLane_Sel_Slaver;
					Select_Macro_Lane(MacroLane_Sel_Master,sMacroID_Master);
					Select_Macro_Lane(MacroLane_Sel_Slaver,sMacroID_Slaver);

					selectMacro_MB(MacroLane_Sel_Master);
					CS.clkRegs.SliceID(0).Broadcast(1);
					CS.clkRegs.setss_slavemode(0).Write2DUT(45);

					selectMacro_MB(MacroLane_Sel_Slaver);
					CS.clkRegs.SliceID(0).Broadcast(1);
					CS.clkRegs.setss_slavemode(1).Write2DUT(45);
				}

				selectMacro_MB(MacroLane_Sel);
				DS.Broadcast();

				HiLinkPreset();

			d2s::d2s_LABEL_END();

			if(Global_D2S_Mode == LearningMode) {
				hout(REG_ACCESS) << "***************  After Power up DS.CLK.TX.RX ***************" << endl;
				FWreadDefaultRegisters2CSR(MacroLane_Sel);
			}

			if("YES" == sLoadFW_EN)
			{
				Load_FirmWare(MacroLane_Sel);

				ReadFirmWareRevAndPrint(MacroLane_Sel);
			}

		return;
		}

};
REGISTER_TESTCLASS("HILINK_RESET", HILINK_RESET);

