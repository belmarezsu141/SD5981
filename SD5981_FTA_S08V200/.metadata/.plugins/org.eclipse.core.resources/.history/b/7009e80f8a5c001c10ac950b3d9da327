//for test method API interfaces
//#include "mapi.hpp"
//using namespace std;
//using namespace V93kLimits;

#include <stdio.h>
#include <string.h>
#include <iostream>
#include <string>
#include <unistd.h>
#include "TestClass.h"
//#include "CCTimer.h"
#include <UserAPI.h>
#include "type.h"
#include "HILINK_DRIVE/HiLink_Types.h"
#include <cmath>
#include <HILINK_PUG/HiLink16_PUG.h>
/**
 * Test method class.
 *
 * For each testsuite using this test method, one object of this
 * class is created.
 */
class RxDiffResBefCal: public TestClass {

public:11
	STRING 				mHiLink16_MacroList;
	STRING 				mPinList;
	STRING 				sPinList;
	STRING 				sPinList_P;
	STRING 				sPinList_N;
	INT					iPrintLvl;

	/**
	 *Initialize the parameter interface to the testflow.
	 *This method is called just once after a testsuite is created.
	 */
	void init()
	{
		add_param("H16LR_MacroList","string",&mHiLink16_MacroList)
					 .set_comment("HiLink16 Macro List for test")
					 //.set_options("0,1:FromPinList")
					 .set_default("0,1");
//		add_param("PinList","PinString",&mPinList);
		add_param("PrintLvl[0~15]","int",&iPrintLvl)
					 .set_comment("Enable this flag when FlowVariable DebugLevel = 10000(16)"
							     "0000 = RELEASE; 0001 = GENERAL; 0010 = DETAIL; 0100 = EYE_PLOT; 1000 = REG_ACCESS; Can be Assembled")
					 //.set_options("0:1:3:4:7:9")
					 .set_default("3");
	}
	void execute()
	{

		m_TestName = TheSoft.Flow().Test().GetCurrentTestName();
		m_TestNumber  = TheSoft.Flow().GetCurrentFlowTestTestNumber();
		m_HardBin  = TheSoft.Flow().GetCurrentFlowTestHardFailBin();
		m_SoftBin  = TheSoft.Flow().GetCurrentFlowTestSoftFailBin();

		static	STRING          	sTestsuiteName;
		static	INT					iOffline;
		static  MACRO_LANE_SEL 		MacroLane_Sel;

		static	LANE_DOUBLE 		RxDiffMeasVoltage1;
		static 	LANE_DOUBLE 		RxDiffMeasVoltage2;
		static 	LANE_DOUBLE 		RxMeasRes;

			//=============================================
			// Variables and MacroLane initialization
			//=============================================
			GET_SYSTEM_FLAG	("offline",iOffline);
			GET_TESTSUITE_NAME(sTestsuiteName);
			hout.setLevel(iPrintLvl);
			hout.printsuitename(sTestsuiteName);
			Select_Macro_Lane(MacroLane_Sel,mHiLink16_MacroList,mPinList);

			GetRxPinList(MacroLane_Sel, sPinList_P, sPinList_N, sPinList);

//			D2S_FRAMEWORK;
			//=============================================
			// Device Setup
			//=============================================

			d2s::d2s_LABEL_BEGIN("H16LRTV100_MPB_RxResBefCal_setup",Global_D2S_Mode);

				selectMacro_MB(MacroLane_Sel);
				DS.Broadcast();

				DS.rxRegs.setrxcapbypass(0).Write2DUT(0); /*AC Coupling Mode*/
				DS.rxRegs.setrxterm_floating_sel(1).Write2DUT(8);
				DS.rxRegs.setrxterm_floating_en(1).Write2DUT(27);

			d2s::d2s_LABEL_END();
			//=============================================
			// Variables definition and initialization
			//=============================================
			RxDiffMeasVoltage1.init(0);
			RxDiffMeasVoltage2.init(0);
			RxMeasRes.init(0);

			//=============================================
			// PPMU SETUP
			//=============================================
			DOUBLE 	mCurrentSink1 = 0.002;
			DOUBLE 	mCurrentSink2 = -0.002;

			//=============================================
			// Measurement1
			//=============================================
			//set PPMU to sink 5mA at under tested pins
			PinArrayDouble RxSigMeasVoltage1 = PPMU_FIMV_measure(sPinList_P,mCurrentSink1,2,0.003,6);
			PinArrayDouble RxSigMeasCurrent1 = PPMU_FVMI_measure(sPinList_N,0,10*mA,0.003,6);

			FOREACH_ACTIVESITE_BEGIN(SiteID, bInterrupt)
				for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
				{
					UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
					const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;

					for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
					{
						UINT LaneID = vLane[laneIndex];
						RxDiffMeasVoltage1[SiteID][MacroID][LaneID] = RxSigMeasVoltage1.GetData(LANE_INFO[MacroID][LaneID].RX_P,SiteID);
					}
				}
			FOREACH_ACTIVESITE_END

			//=============================================
			// Measurement2
			//=============================================
			PinArrayDouble RxSigMeasVoltage2 = PPMU_FIMV_measure(sPinList_P,mCurrentSink2,2,0.003,6);
			PinArrayDouble RxSigMeasCurrent2 = PPMU_FVMI_measure(sPinList_N,0,10*mA,0.003,6);

			FOREACH_ACTIVESITE_BEGIN(SiteID, bInterrupt)
				for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
				{
					UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
					const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;

					for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
					{
						UINT LaneID = vLane[laneIndex];
						RxDiffMeasVoltage2[SiteID][MacroID][LaneID] = RxSigMeasVoltage2.GetData(LANE_INFO[MacroID][LaneID].RX_P,SiteID);
						RxMeasRes[SiteID][MacroID][LaneID] = (RxDiffMeasVoltage1[SiteID][MacroID][LaneID] - RxDiffMeasVoltage2[SiteID][MacroID][LaneID]) / (mCurrentSink1 - mCurrentSink2);

						if (iOffline) {
							RxMeasRes[SiteID][MacroID][LaneID] = 100;
						}

						hout(DETAIL) << "Pin " << LANE_INFO[MacroID][LaneID].RX_P << ": " << "Voltage at " <<  mCurrentSink1 <<" [mA] = " <<  RxDiffMeasVoltage1[SiteID][MacroID][LaneID] << " mV" << endl;
						hout(DETAIL) << "Pin " << LANE_INFO[MacroID][LaneID].RX_P << ": " << "Voltage at " <<  mCurrentSink2 <<" [mA] = " <<  RxDiffMeasVoltage2[SiteID][MacroID][LaneID] << " mV" << endl;
						hout(DETAIL) << "Pin " << LANE_INFO[MacroID][LaneID].RX_P << ": " << "Resistor = "  << RxMeasRes[SiteID][MacroID][LaneID] << " Ohm" << endl;

					}
				}
			FOREACH_ACTIVESITE_END

		//=============================================
		// Datalog
		//=============================================
		HiLink_PerLane_Judge(MacroLane_Sel, "RxDiffResBefCal", 0.0, RxMeasRes, 0.0, NONE);
	}
	////////////////////////////////////////////////////////////////////////////////
	// TM Purpose:                                                                //
	// This TM is for resistor measurement by using PPMU, it is to measure        //
	// voltage at tested pins twice, fist sink 5 mA and second sink 1 mA,         //
	// and calculate resistor in equation Res=(Volt1-Volt2)/(SinkCurr1-SinkCurr2).//
	//																			  //
	// Parameters:																  //
	// 1. PinList: Pin list to be tested                                          //
	// 2. currentSink1_mA: First sink current, in mA                              //
	// 3. curerntSink2_mA: Second sink current, in mA                             //
	////////////////////////////////////////////////////////////////////////////////
	/**
	 *This test is invoked per site.
	 */
//	virtual void run()
//	{
//		//=============================================
//		// Common definition of TM for offline flag,
//		// d2s mode, debug mode, test suite name, etc.
//		//=============================================
//		static	STRING          	sTestsuiteName;
//		static	INT					iOffline;
//		static  MACRO_LANE_SEL 		MacroLane_Sel;
//
//		static	LANE_DOUBLE 		RxDiffMeasVoltage1;
//		static 	LANE_DOUBLE 		RxDiffMeasVoltage2;
//		static 	LANE_DOUBLE 		RxMeasRes;
//
//		ON_FIRST_INVOCATION_BEGIN();
//
//			//=============================================
//			// Variables and MacroLane initialization
//			//=============================================
//			GET_SYSTEM_FLAG		("offline",&iOffline);
//			GET_TESTSUITE_NAME	(sTestsuiteName);
//			hout.setLevel(iPrintLvl);
//			hout.printsuitename(sTestsuiteName);
//			Select_Macro_Lane(MacroLane_Sel,mHiLink16_MacroList,mPinList);
//
//			GetRxPinList(MacroLane_Sel, sPinList_P, sPinList_N, sPinList);
//
//			D2S_FRAMEWORK;
//			//=============================================
//			// Device Setup
//			//=============================================
//
//			fr.d2s_LABEL_BEGIN("H16LRTV100_MPB_RxResBefCal_setup",d2sFrameWorkModeType::Enum(d2s_mode));
//
//				selectMacro_MB(MacroLane_Sel);
//				DS.Broadcast();
//
//				DS.rxRegs.setrxcapbypass(0).Write2DUT(0); /*AC Coupling Mode*/
//				DS.rxRegs.setrxterm_floating_sel(1).Write2DUT(8);
//				DS.rxRegs.setrxterm_floating_en(1).Write2DUT(27);
//
//			fr.d2s_LABEL_END();
//
//
//			//=============================================
//			// Variables definition and initialization
//			//=============================================
//			RxDiffMeasVoltage1.init(0);
//			RxDiffMeasVoltage2.init(0);
//			RxMeasRes.init(0);
//
//			//=============================================
//			// PPMU SETUP
//			//=============================================
//			DOUBLE 						mCurrentSink1_mA = 2;
//			DOUBLE 						mCurrentSink2_mA = -2;
//
//			PPMU_SETTING 				Set;
//			PPMU_RELAY   				Rly_PPMU_ON,Rly_AC_ON;
//			PPMU_CLAMP   				Clamp_on,Clamp_off;
//			PPMU_MEASURE 				Meas;
//			TASK_LIST    				Task,TaskSetup,TaskClean;
//			Rly_PPMU_ON.pin(sPinList).status("PPMU_ON");
//			Rly_PPMU_ON.wait(1.3 ms);
//			Clamp_on.pin(sPinList).status("CLAMP_ON").low(-0.8 V).high(0.8 V);
//			Clamp_off.pin(sPinList).status("CLAMP_OFF");
//			Rly_AC_ON.pin(sPinList).status("AC_ON");
//			Rly_AC_ON.wait(1.3 ms);
//			Meas.pin(sPinList_P).execMode(TM::OVAL);
//			TaskSetup.add(Clamp_on).add(Rly_PPMU_ON).add(Clamp_off).setup();
//			Task.add(Set).add(Meas).setup();
//			TaskClean.add(Rly_AC_ON).setup();
//			TaskSetup.execute();
//
//			//=============================================
//			// Measurement1
//			//=============================================
//			//set PPMU to sink 5mA at under tested pins
//			Set.pin(sPinList_P).iForce(mCurrentSink1_mA mA).iRange(mCurrentSink1_mA mA).min(0 V).max(2 V);
//			Set.pin(sPinList_N).vForce(0 mV).iRange(10 mA).min(0 uA).max(10 mA);
//			Task.execute();
//
//			FOR_EACH_SITE_BEGIN();
//				INT SiteID = CURRENT_SITE_NUMBER() - 1;
//				for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
//				{
//					UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
//					const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;
//
//					for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
//					{
//						UINT LaneID = vLane[laneIndex];
//						RxDiffMeasVoltage1[SiteID][MacroID][LaneID] = Meas.getValue(LANE_INFO[MacroID][LaneID].RX_P) / (1 mV);
//					}
//				}
//			FOR_EACH_SITE_END();
//
//			//=============================================
//			// Measurement2
//			//=============================================
//			Set.pin(sPinList_P).iForce(mCurrentSink2_mA mA).iRange(mCurrentSink2_mA mA).min(0 V).max(2 V);
//			Set.pin(sPinList_N).vForce(0 mV).iRange(10 mA).min(0 uA).max(10 mA);
//			Task.execute();
//
//			FOR_EACH_SITE_BEGIN();
//				INT SiteID = CURRENT_SITE_NUMBER() - 1;
//				for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
//				{
//					UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
//					const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;
//
//					for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
//					{
//						UINT LaneID = vLane[laneIndex];
//						RxDiffMeasVoltage2[SiteID][MacroID][LaneID] = Meas.getValue(LANE_INFO[MacroID][LaneID].RX_P) / (1 mV);
//						RxMeasRes[SiteID][MacroID][LaneID] = (RxDiffMeasVoltage1[SiteID][MacroID][LaneID] - RxDiffMeasVoltage2[SiteID][MacroID][LaneID]) / (mCurrentSink1_mA - mCurrentSink2_mA);
//
//						if (iOffline) {
//							RxMeasRes[SiteID][MacroID][LaneID] = 100;
//						}
//
//						hout(DETAIL) << "Pin " << LANE_INFO[MacroID][LaneID].RX_P << ": " << "Voltage at " <<  mCurrentSink1_mA <<" [mA] = " <<  RxDiffMeasVoltage1[SiteID][MacroID][LaneID] << " mV" << endl;
//						hout(DETAIL) << "Pin " << LANE_INFO[MacroID][LaneID].RX_P << ": " << "Voltage at " <<  mCurrentSink2_mA <<" [mA] = " <<  RxDiffMeasVoltage2[SiteID][MacroID][LaneID] << " mV" << endl;
//						hout(DETAIL) << "Pin " << LANE_INFO[MacroID][LaneID].RX_P << ": " << "Resistor = "  << RxMeasRes[SiteID][MacroID][LaneID] << " Ohm" << endl;
//
//					}
//				}
//			FOR_EACH_SITE_END();
//
//
//			TaskClean.execute();
//
//		ON_FIRST_INVOCATION_END();
//
//		//=============================================
//		// Datalog
//		//=============================================
//		HiLink_PerLane_Judge(MacroLane_Sel, "RxDiffResBefCal", RxMeasRes);
//
//		return;
//	}

	/**
	 *This function will be invoked once the specified parameter's value is changed.
	 *@param parameterIdentifier
	 */
//	virtual void postParameterChange(const string& parameterIdentifier)
//	{
//		//Add your code
//		//Note: Test Method API should not be used in this method!
//		bool visible = (mHiLink16_MacroList == "FromPinList");
//		getParameter("PinList").setVisible(visible);
//
//
//		return;
//	}
//
//	/**
//	 *This function will be invoked once the Select Test Method Dialog is opened.
//	 */
//	virtual const string getComment() const
//	{
//		string comment = " please add your comment for this method.";
//		return comment;
//	}
};
REGISTER_TESTCLASS("RxDiffResBefCal", RxDiffResBefCal);
