//for test method API interfaces
//#include "mapi.hpp"
//using namespace std;
//using namespace V93kLimits;

#include <HILINK_PUG/HiLink16_PUG.h>

/**
 * Test method class.
 *
 * For each testsuite using this test method, one object of this
 * class is created.
 */
class ClkPurity_ABIST: public TestClass {

public:
	STRING 				mHiLink16_MacroList;
	STRING 				mPinList;
	STRING				mLoopbackMode;
	INT					iPrintLvl;

	/**
	 *Initialize the parameter interface to the testflow.
	 *This method is called just once after a testsuite is created.
	 */
	void init()
	{
		add_param("H16LR_MacroList","string",&mHiLink16_MacroList)
					 .set_comment("HiLink16 Macro List for test")
					 //.set_options("0,1:FromPinList")
					 .set_default("0,1");
//		add_param("PinList","PinString",&mPinList);
		add_param("Loopback_Mode","string",&mLoopbackMode)
					 //.set_options("Bump:PreDriver:External")
					 .set_default("Bump");
		add_param("PrintLvl[0~15]","int",&iPrintLvl)
					 .set_comment("Enable this flag when FlowVariable DebugLevel = 10000(16)"
							     "0000 = RELEASE; 0001 = GENERAL; 0010 = DETAIL; 0100 = EYE_PLOT; 1000 = REG_ACCESS; Can be Assembled")
					 //.set_options("0:1:3:4:7:9")
					 .set_default("3");
	}

	////////////////////////////////////////////////////////////////////////////////
	// TM Purpose:                                                                //
	// This TM is to measure the deviation of clk pattern by reading register     //
	// in ABIST mode several times, and record the maximum phase deviation.       //
	//																			  //
	// Parameters:																  //
	// 1. PinList: Pin list to be tested                                          //
	////////////////////////////////////////////////////////////////////////////////

	void execute()
	{

		//=============================================
		// Common definition of TM for offline flag,
		// d2s mode, debug mode, test suite name, etc.
		//=============================================
		static	STRING          	sTestsuiteName;
		static	INT					iOffline;
		static  MACRO_LANE_SEL 		MacroLane_Sel;

		static	LANE_DOUBLE 		MinEyeWidth;
		static	LANE_DOUBLE			MaxEyeWidth;
		static	LANE_DOUBLE			PhaseDiviation;
		static	LANE_DOUBLE			MaxJitter;


			//=============================================
			// Variables and MacroLane initialization
			//=============================================
			iOffline = 0;
			sTestsuiteName = TheSoft.Flow().Test().GetCurrentTestName();
			hout.setLevel(iPrintLvl);
			hout.printsuitename(sTestsuiteName);
			Select_Macro_Lane(MacroLane_Sel,mHiLink16_MacroList,mPinList);

			INT 				SampleNum = 24;
			//=============================================
			// Device Setup
			//=============================================
			d2s_JTAG& jtag = d2s_JTAG::Instance();

			sprintf(label,"H16LRTV100_MPB_CLKPURITY_SETUP_RateMode%d_DataWidth%d",CUSTpara.RateMode,CUSTpara.DataWidth);
			d2s::d2s_LABEL_BEGIN(label, Global_D2S_Mode);

				selectMacro_MB(MacroLane_Sel);
				DS.Broadcast();

				if (mLoopbackMode == "External" ) {
					DisableTxToRxSerLpbk();
				} else {
					EnableTxToRxSerLpbk(mLoopbackMode);
				}

				EnableTxPrbsGen(Custom_CLK);

				DS.rxRegs.setcdrfreeze(0)
						 .Write2DUT(10);
				jtag.wait(20 *0.000001);
				DS.rxRegs.setcdrfreeze(1)
						 .Write2DUT(10);

				DS.rxRegs.setephsofst(0x10)
						 .Write2DUT(12);

				DS.rxRegs.setcdrfreeze(0)
						 .Write2DUT(10);
				jtag.wait(20 *0.000001);
				DS.rxRegs.setcdrfreeze(1)
						 .Write2DUT(10);

			d2s::d2s_LABEL_END();

			LANE_ARRAY_D 			EyewidthSAMPLE;
			LANE_ARRAY_D 			EyeheightSAMPLE;

			MinEyeWidth.init(0);
			MaxEyeWidth.init(0);
			PhaseDiviation.init(0);
			MaxJitter.init(0);
			EyewidthSAMPLE.init(SampleNum,0);
			EyeheightSAMPLE.init(SampleNum,0);


			for (INT i = 0; i < SampleNum; i ++)
			{
				hout(DETAIL) << "Sample_Num: " << i << endl;
				LANE_EYEDATA			eyeData;
				GetFourPointEyeDiagram(MacroLane_Sel, CUSTpara.Data_Rate, eyeData, false);

				FOREACH_ACTIVESITE_BEGIN(SiteID, bInterrupt)
					for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
					{
						UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
						const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;

						for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
						{
							UINT LaneID = vLane[laneIndex];
							EyewidthSAMPLE[SiteID][MacroID][LaneID][i] = eyeData[SiteID][MacroID][LaneID].eyeWidth;
							EyeheightSAMPLE[SiteID][MacroID][LaneID][i] = eyeData[SiteID][MacroID][LaneID].eyeHeight;
						}
					}
				FOREACH_ACTIVESITE_END
			}

			if (hout.IsEyePlotEn()) {
				GetEyeDiagram(MacroLane_Sel, CUSTpara.Data_Rate);
			}

			INT PhaseNum;
			switch (CUSTpara.RateMode) {
				case 0: PhaseNum = 64;		break;
				case 1: PhaseNum = 128;  	break;
				case 2: PhaseNum = 256; 	break;
				case 3: PhaseNum = 512; 	break;
				default: PhaseNum = 64;		break;
			}
			ARRAY_D 			tmp_val;
			tmp_val.resize(SampleNum);
			DOUBLE 				dmin,dmax;
			INT 				imin,imax;

			FOREACH_ACTIVESITE_BEGIN(SiteID, bInterrupt)
				for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
				{
					UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
					const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;

					for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
					{
						UINT LaneID = vLane[laneIndex];
						for (INT sampleIndex = 0; sampleIndex < SampleNum; sampleIndex ++)
						{
							tmp_val[sampleIndex] = EyewidthSAMPLE[SiteID][MacroID][LaneID][sampleIndex];
						}
						DSP_MINMAX(tmp_val,&dmin,&dmax,&imin,&imax);
						MinEyeWidth[SiteID][MacroID][LaneID] = dmin;
						MaxEyeWidth[SiteID][MacroID][LaneID] = dmax;
						PhaseDiviation[SiteID][MacroID][LaneID] = (dmax - dmin) * PhaseNum;
						MaxJitter[SiteID][MacroID][LaneID] = 1 - MinEyeWidth[SiteID][MacroID][LaneID];
					}
				}
			FOREACH_ACTIVESITE_END

			FOREACH_ACTIVESITE_BEGIN(SiteID, bInterrupt)
				for (UINT macroIndex = 0; macroIndex < MacroLane_Sel.size(); macroIndex ++)
				{
					UINT MacroID = MacroLane_Sel[macroIndex].MacroID;
					const vector<UINT>& vLane = MacroLane_Sel[macroIndex].vLane;

					for (UINT laneIndex = 0; laneIndex < vLane.size(); laneIndex ++)
					{
						UINT LaneID = vLane[laneIndex];
						if (iOffline) {
							MaxJitter[SiteID][MacroID][LaneID] = 0.1;
							PhaseDiviation[SiteID][MacroID][LaneID] = 0;
						}
					}
				}
			FOREACH_ACTIVESITE_END

		//=============================================
		// Datalog
		//=============================================
//		HiLink_PerLane_Judge(MacroLane_Sel, "EyePhaseDivPt", PhaseDiviation);
//		HiLink_PerLane_Judge(MacroLane_Sel, "MaxJitterUI", MaxJitter);

		return;
	}

};
REGISTER_TESTCLASS("ClkPurity_ABISTT", ClkPurity_ABIST);
